// Copyright (c) 2020 Graphcore Ltd. All rights reserved.
// Auto generated file, do not modify
// Run `python3 PopParse.py to regenerate
// clang-format off

OP_DECL("popart::groupnormalization", groupnormalization, AiGraphcoreOpset1.groupnormalization, ARG(INT,num_groups) ARG(FLOAT,epsilon) , BODY_ARG(num_groups) BODY_ARG(epsilon) )
OP_DECL("popart::subsample", subsample, AiGraphcoreOpset1.subsample, ARG(INT_VEC,strides) , BODY_ARG(strides) )
OP_DECL("popart::printtensor", printtensor, AiGraphcoreOpset1.printtensor, ARG(INT,print_gradient) , BODY_ARG(print_gradient) )
OP_DECL("popart::scale", scale, AiGraphcoreOpset1.scale, ARG(FLOAT,scale) , BODY_ARG(scale) )
OP_DECL("popart::lstm", lstm, AiGraphcoreOpset1.lstm, ARG(INT,outputFullSequence) , BODY_ARG(outputFullSequence) )
OP_DECL("popart::gelu", gelu, AiGraphcoreOpset1.gelu, NONE, NONE)
OP_DECL("popart::detach", detach, AiGraphcoreOpset1.detach, ARG(INT,pass_through_creation) , BODY_ARG(pass_through_creation) )
OP_DECL("popart::replicatedallreduce", replicatedallreduce, AiGraphcoreOpset1.replicatedallreduce, NONE, NONE)
OP_DECL("popart::l1loss", l1loss, AiGraphcoreOpset1.l1loss, ARG(FLOAT,lamda) ARG(INT,reduction) , BODY_ARG(lamda) BODY_ARG(static_cast<popart::ReductionType>(reduction)) )
OP_DECL("popart::nllloss", nllloss, AiGraphcoreOpset1.nllloss, ARG(INT,reduction) ARG(INT,ignoreIndex) , BODY_ARG(static_cast<popart::ReductionType>(reduction)) BODY_ARG(ignoreIndex) )
OP_DECL("popart::identityloss", identityloss, AiGraphcoreOpset1.identityloss, ARG(INT,reduction) , BODY_ARG(static_cast<popart::ReductionType>(reduction)) )
OP_DECL("popart::acosh", acosh, AiOnnxOpset9.acosh, NONE, NONE)
OP_DECL("popart::asinh", asinh, AiOnnxOpset9.asinh, NONE, NONE)
OP_DECL("popart::atanh", atanh, AiOnnxOpset9.atanh, NONE, NONE)
OP_DECL("popart::batchnormalization", batchnormalization, AiOnnxOpset9.batchnormalization, ARG(INT,num_outputs) ARG(FLOAT,epsilon) ARG(FLOAT,momentum) , BODY_ARG(num_outputs) BODY_ARG(epsilon) BODY_ARG(momentum) )
OP_DECL("popart::compress", compress, AiOnnxOpset9.compress, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::cosh", cosh, AiOnnxOpset9.cosh, NONE, NONE)
OP_DECL("popart::erf", erf, AiOnnxOpset9.erf, NONE, NONE)
OP_DECL("popart::eyelike", eyelike, AiOnnxOpset9.eyelike, ARG(INT,dtype) ARG(INT,k) , BODY_ARG(dtype) BODY_ARG(k) )
OP_DECL("popart::flatten", flatten, AiOnnxOpset9.flatten, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::gemm", gemm, AiOnnxOpset9.gemm, ARG(FLOAT,alpha) ARG(FLOAT,beta) ARG(INT,transA) ARG(INT,transB) , BODY_ARG(alpha) BODY_ARG(beta) BODY_ARG(transA) BODY_ARG(transB) )
OP_DECL("popart::greater", greater, AiOnnxOpset9.greater, NONE, NONE)
OP_DECL("popart::isnan", isnan, AiOnnxOpset9.isnan, NONE, NONE)
OP_DECL("popart::less", less, AiOnnxOpset9.less, NONE, NONE)
OP_DECL("popart::matmul", matmul, AiOnnxOpset9.matmul, NONE, NONE)
OP_DECL("popart::maxunpool", maxunpool, AiOnnxOpset9.maxunpool, ARG(INT_VEC,kernel_shape) ARG(INT_VEC,pads) ARG(INT_VEC,strides) , BODY_ARG(kernel_shape) BODY_ARG(pads) BODY_ARG(strides) )
OP_DECL("popart::meanvariancenormalization", meanvariancenormalization, AiOnnxOpset9.meanvariancenormalization, ARG(INT_VEC,axes) , BODY_ARG(axes) )
OP_DECL("popart::nonzero", nonzero, AiOnnxOpset9.nonzero, NONE, NONE)
OP_DECL("popart::onehot", onehot, AiOnnxOpset9.onehot, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::prelu", prelu, AiOnnxOpset9.prelu, NONE, NONE)
OP_DECL("popart::scatter", scatter, AiOnnxOpset9.scatter, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::shrink", shrink, AiOnnxOpset9.shrink, ARG(FLOAT,bias) ARG(FLOAT,lambd) , BODY_ARG(bias) BODY_ARG(lambd) )
OP_DECL("popart::sign", sign, AiOnnxOpset9.sign, NONE, NONE)
OP_DECL("popart::sinh", sinh, AiOnnxOpset9.sinh, NONE, NONE)
OP_DECL("popart::where", where, AiOnnxOpset9.where, NONE, NONE)
OP_DECL("popart::expand", expand, AiOnnxOpset9.expand, NONE, NONE)
OP_DECL("popart::max", max, AiOnnxOpset9.max, NONE, NONE)
OP_DECL("popart::maxpool", maxpool, AiOnnxOpset9.maxpool, ARG(INT,num_outputs) ARG(INT_VEC,kernel_shape) ARG(INT_VEC,pads) ARG(INT,storage_order) ARG(INT_VEC,strides) , BODY_ARG(num_outputs) BODY_ARG(kernel_shape) BODY_ARG(pads) BODY_ARG(storage_order) BODY_ARG(strides) )
OP_DECL("popart::mean", mean, AiOnnxOpset9.mean, NONE, NONE)
OP_DECL("popart::min", min, AiOnnxOpset9.min, NONE, NONE)
OP_DECL("popart::sum", sum, AiOnnxOpset9.sum, NONE, NONE)
OP_DECL("popart::acos", acos, AiOnnxOpset9.acos, NONE, NONE)
OP_DECL("popart::add", add, AiOnnxOpset9.add, NONE, NONE)
OP_DECL("popart::logical_and", logical_and, AiOnnxOpset9.logical_and, NONE, NONE)
OP_DECL("popart::asin", asin, AiOnnxOpset9.asin, NONE, NONE)
OP_DECL("popart::atan", atan, AiOnnxOpset9.atan, NONE, NONE)
OP_DECL("popart::averagepool", averagepool, AiOnnxOpset9.averagepool, ARG(INT_VEC,kernel_shape) ARG(INT,count_include_pad) ARG(INT_VEC,pads) ARG(INT_VEC,strides) , BODY_ARG(kernel_shape) BODY_ARG(count_include_pad) BODY_ARG(pads) BODY_ARG(strides) )
OP_DECL("popart::cos", cos, AiOnnxOpset9.cos, NONE, NONE)
OP_DECL("popart::div", div, AiOnnxOpset9.div, NONE, NONE)
OP_DECL("popart::dropout", dropout, AiOnnxOpset9.dropout, ARG(INT,num_outputs) ARG(FLOAT,ratio) , BODY_ARG(num_outputs) BODY_ARG(ratio) )
OP_DECL("popart::equal", equal, AiOnnxOpset9.equal, NONE, NONE)
OP_DECL("popart::mul", mul, AiOnnxOpset9.mul, NONE, NONE)
OP_DECL("popart::multinomial", multinomial, AiOnnxOpset9.multinomial, ARG(INT,dtype) ARG(INT,sample_size) ARG(FLOAT,seed) , BODY_ARG(dtype) BODY_ARG(sample_size) BODY_ARG(seed) )
OP_DECL("popart::logical_or", logical_or, AiOnnxOpset9.logical_or, NONE, NONE)
OP_DECL("popart::pow", pow, AiOnnxOpset9.pow, NONE, NONE)
OP_DECL("popart::sin", sin, AiOnnxOpset9.sin, NONE, NONE)
OP_DECL("popart::sub", sub, AiOnnxOpset9.sub, NONE, NONE)
OP_DECL("popart::tan", tan, AiOnnxOpset9.tan, NONE, NONE)
OP_DECL("popart::logical_xor", logical_xor, AiOnnxOpset9.logical_xor, NONE, NONE)
OP_DECL("popart::abs", abs, AiOnnxOpset9.abs, NONE, NONE)
OP_DECL("popart::argmax", argmax, AiOnnxOpset9.argmax, ARG(INT,axis) ARG(INT,keepdims) , BODY_ARG(axis) BODY_ARG(keepdims) )
OP_DECL("popart::argmin", argmin, AiOnnxOpset9.argmin, ARG(INT,axis) ARG(INT,keepdims) , BODY_ARG(axis) BODY_ARG(keepdims) )
OP_DECL("popart::ceil", ceil, AiOnnxOpset9.ceil, NONE, NONE)
OP_DECL("popart::clip", clip, AiOnnxOpset9.clip, ARG(FLOAT,max) ARG(FLOAT,min) , BODY_ARG(max) BODY_ARG(min) )
OP_DECL("popart::concat", concat, AiOnnxOpset9.concat, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::conv", conv, AiOnnxOpset9.conv, ARG(INT_VEC,dilations) ARG(INT,group) ARG(INT_VEC,kernel_shape) ARG(INT_VEC,pads) ARG(INT_VEC,strides) , BODY_ARG(dilations) BODY_ARG(group) BODY_ARG(kernel_shape) BODY_ARG(pads) BODY_ARG(strides) )
OP_DECL("popart::convtranspose", convtranspose, AiOnnxOpset9.convtranspose, ARG(INT_VEC,dilations) ARG(INT,group) ARG(INT_VEC,kernel_shape) ARG(INT_VEC,output_padding) ARG(INT_VEC,output_shape) ARG(INT_VEC,pads) ARG(INT_VEC,strides) , BODY_ARG(dilations) BODY_ARG(group) BODY_ARG(kernel_shape) BODY_ARG(output_padding) BODY_ARG(output_shape) BODY_ARG(pads) BODY_ARG(strides) )
OP_DECL("popart::depthtospace", depthtospace, AiOnnxOpset9.depthtospace, ARG(INT,blocksize) , BODY_ARG(blocksize) )
OP_DECL("popart::elu", elu, AiOnnxOpset9.elu, ARG(FLOAT,alpha) , BODY_ARG(alpha) )
OP_DECL("popart::exp", exp, AiOnnxOpset9.exp, NONE, NONE)
OP_DECL("popart::floor", floor, AiOnnxOpset9.floor, NONE, NONE)
OP_DECL("popart::gather", gather, AiOnnxOpset9.gather, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::globalaveragepool", globalaveragepool, AiOnnxOpset9.globalaveragepool, NONE, NONE)
OP_DECL("popart::globallppool", globallppool, AiOnnxOpset9.globallppool, ARG(INT,p) , BODY_ARG(p) )
OP_DECL("popart::globalmaxpool", globalmaxpool, AiOnnxOpset9.globalmaxpool, NONE, NONE)
OP_DECL("popart::hardsigmoid", hardsigmoid, AiOnnxOpset9.hardsigmoid, ARG(FLOAT,alpha) ARG(FLOAT,beta) , BODY_ARG(alpha) BODY_ARG(beta) )
OP_DECL("popart::hardmax", hardmax, AiOnnxOpset9.hardmax, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::identity", identity, AiOnnxOpset9.identity, NONE, NONE)
OP_DECL("popart::instancenormalization", instancenormalization, AiOnnxOpset9.instancenormalization, ARG(FLOAT,epsilon) , BODY_ARG(epsilon) )
OP_DECL("popart::lrn", lrn, AiOnnxOpset9.lrn, ARG(INT,size) ARG(FLOAT,alpha) ARG(FLOAT,beta) ARG(FLOAT,bias) , BODY_ARG(size) BODY_ARG(alpha) BODY_ARG(beta) BODY_ARG(bias) )
OP_DECL("popart::leakyrelu", leakyrelu, AiOnnxOpset9.leakyrelu, ARG(FLOAT,alpha) , BODY_ARG(alpha) )
OP_DECL("popart::log", log, AiOnnxOpset9.log, NONE, NONE)
OP_DECL("popart::logsoftmax", logsoftmax, AiOnnxOpset9.logsoftmax, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::lpnormalization", lpnormalization, AiOnnxOpset9.lpnormalization, ARG(INT,axis) ARG(INT,p) , BODY_ARG(axis) BODY_ARG(p) )
OP_DECL("popart::lppool", lppool, AiOnnxOpset9.lppool, ARG(INT_VEC,kernel_shape) ARG(INT,p) ARG(INT_VEC,pads) ARG(INT_VEC,strides) , BODY_ARG(kernel_shape) BODY_ARG(p) BODY_ARG(pads) BODY_ARG(strides) )
OP_DECL("popart::maxroipool", maxroipool, AiOnnxOpset9.maxroipool, ARG(INT_VEC,pooled_shape) ARG(FLOAT,spatial_scale) , BODY_ARG(pooled_shape) BODY_ARG(spatial_scale) )
OP_DECL("popart::neg", neg, AiOnnxOpset9.neg, NONE, NONE)
OP_DECL("popart::logical_not", logical_not, AiOnnxOpset9.logical_not, NONE, NONE)
OP_DECL("popart::randomnormallike", randomnormallike, AiOnnxOpset9.randomnormallike, ARG(INT,dtype) ARG(FLOAT,mean) ARG(FLOAT,scale) ARG(FLOAT,seed) , BODY_ARG(dtype) BODY_ARG(mean) BODY_ARG(scale) BODY_ARG(seed) )
OP_DECL("popart::randomuniformlike", randomuniformlike, AiOnnxOpset9.randomuniformlike, ARG(INT,dtype) ARG(FLOAT,high) ARG(FLOAT,low) ARG(FLOAT,seed) , BODY_ARG(dtype) BODY_ARG(high) BODY_ARG(low) BODY_ARG(seed) )
OP_DECL("popart::reciprocal", reciprocal, AiOnnxOpset9.reciprocal, NONE, NONE)
OP_DECL("popart::reducel1", reducel1, AiOnnxOpset9.reducel1, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducel2", reducel2, AiOnnxOpset9.reducel2, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducelogsum", reducelogsum, AiOnnxOpset9.reducelogsum, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducelogsumexp", reducelogsumexp, AiOnnxOpset9.reducelogsumexp, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducemax", reducemax, AiOnnxOpset9.reducemax, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducemean", reducemean, AiOnnxOpset9.reducemean, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducemin", reducemin, AiOnnxOpset9.reducemin, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reduceprod", reduceprod, AiOnnxOpset9.reduceprod, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducesum", reducesum, AiOnnxOpset9.reducesum, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::reducesumsquare", reducesumsquare, AiOnnxOpset9.reducesumsquare, ARG(INT_VEC,axes) ARG(INT,keepdims) , BODY_ARG(axes) BODY_ARG(keepdims) )
OP_DECL("popart::relu", relu, AiOnnxOpset9.relu, NONE, NONE)
OP_DECL("popart::reshape", reshape, AiOnnxOpset9.reshape, NONE, NONE)
OP_DECL("popart::selu", selu, AiOnnxOpset9.selu, ARG(FLOAT,alpha) ARG(FLOAT,gamma) , BODY_ARG(alpha) BODY_ARG(gamma) )
OP_DECL("popart::shape", shape, AiOnnxOpset9.shape, NONE, NONE)
OP_DECL("popart::sigmoid", sigmoid, AiOnnxOpset9.sigmoid, NONE, NONE)
OP_DECL("popart::size", size, AiOnnxOpset9.size, NONE, NONE)
OP_DECL("popart::slice", slice, AiOnnxOpset9.slice, ARG(INT_VEC,ends) ARG(INT_VEC,starts) ARG(INT_VEC,axes) , BODY_ARG(ends) BODY_ARG(starts) BODY_ARG(axes) )
OP_DECL("popart::softmax", softmax, AiOnnxOpset9.softmax, ARG(INT,axis) , BODY_ARG(axis) )
OP_DECL("popart::softplus", softplus, AiOnnxOpset9.softplus, NONE, NONE)
OP_DECL("popart::softsign", softsign, AiOnnxOpset9.softsign, NONE, NONE)
OP_DECL("popart::spacetodepth", spacetodepth, AiOnnxOpset9.spacetodepth, ARG(INT,blocksize) , BODY_ARG(blocksize) )
OP_DECL("popart::split", split, AiOnnxOpset9.split, ARG(INT,num_outputs) ARG(INT,axis) ARG(INT_VEC,split) , BODY_ARG(num_outputs) BODY_ARG(axis) BODY_ARG(split) )
OP_DECL("popart::sqrt", sqrt, AiOnnxOpset9.sqrt, NONE, NONE)
OP_DECL("popart::squeeze", squeeze, AiOnnxOpset9.squeeze, ARG(INT_VEC,axes) , BODY_ARG(axes) )
OP_DECL("popart::tanh", tanh, AiOnnxOpset9.tanh, NONE, NONE)
OP_DECL("popart::tile", tile, AiOnnxOpset9.tile, NONE, NONE)
OP_DECL("popart::topk", topk, AiOnnxOpset9.topk, ARG(INT,k) ARG(INT,axis) , BODY_ARG(k) BODY_ARG(axis) )
OP_DECL("popart::transpose", transpose, AiOnnxOpset9.transpose, ARG(INT_VEC,perm) , BODY_ARG(perm) )
OP_DECL("popart::unsqueeze", unsqueeze, AiOnnxOpset9.unsqueeze, ARG(INT_VEC,axes) , BODY_ARG(axes) )


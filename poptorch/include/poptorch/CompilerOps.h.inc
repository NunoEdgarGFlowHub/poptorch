// Auto generated file, do not modify
// Run `python3 PopParse.py to regenerate

torch::jit::Node* Create_groupnormalization(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t num_groups,float epsilon);
torch::jit::Node* Create_subsample(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & strides);
torch::jit::Node* Create_printtensor(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t print_gradient);
torch::jit::Node* Create_scale(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float scale);
torch::jit::Node* Create_lstm(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t outputFullSequence);
torch::jit::Node* Create_gelu(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_meanvariancenormalization(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes);
torch::jit::Node* Create_nonzero(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_sign(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_isnan(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_shrink(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float bias,float lambd);
torch::jit::Node* Create_sinh(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_scatter(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_onehot(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_maxunpool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & kernel_shape,const std::vector<int64_t> & pads,const std::vector<int64_t> & strides);
torch::jit::Node* Create_acosh(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_where(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_erf(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_asinh(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_greater(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_flatten(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_batchnormalization(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,unsigned int num_outputs,float epsilon,float momentum);
torch::jit::Node* Create_cosh(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_prelu(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_atanh(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_matmul(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_less(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_gemm(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float alpha,float beta,int64_t transA,int64_t transB);
torch::jit::Node* Create_expand(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_max(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_sum(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_mean(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_maxpool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,unsigned int num_outputs,const std::vector<int64_t> & kernel_shape,const std::vector<int64_t> & pads,int64_t storage_order,const std::vector<int64_t> & strides);
torch::jit::Node* Create_min(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_asin(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_logical_xor(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_logical_and(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_sub(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_cos(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_mul(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_sin(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_logical_or(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_acos(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_tan(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_add(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_equal(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_pow(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_div(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_dropout(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,unsigned int num_outputs,float ratio);
torch::jit::Node* Create_atan(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_averagepool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & kernel_shape,int64_t count_include_pad,const std::vector<int64_t> & pads,const std::vector<int64_t> & strides);
torch::jit::Node* Create_floor(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_reducesumsquare(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_tile(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_squeeze(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes);
torch::jit::Node* Create_reducelogsum(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_split(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,unsigned int num_outputs,int64_t axis,const std::vector<int64_t> & split);
torch::jit::Node* Create_sqrt(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_softsign(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_softplus(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_spacetodepth(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t blocksize);
torch::jit::Node* Create_softmax(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_size(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_tanh(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_transpose(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & perm);
torch::jit::Node* Create_shape(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_selu(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float alpha,float gamma);
torch::jit::Node* Create_relu(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_reducemin(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_reducel1(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_reciprocal(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_sigmoid(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_slice(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & ends,const std::vector<int64_t> & starts,const std::vector<int64_t> & axes);
torch::jit::Node* Create_reducelogsumexp(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_neg(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_reshape(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_reducel2(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_conv(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & dilations,int64_t group,const std::vector<int64_t> & kernel_shape,const std::vector<int64_t> & pads,const std::vector<int64_t> & strides);
torch::jit::Node* Create_globalmaxpool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_lppool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & kernel_shape,int64_t p,const std::vector<int64_t> & pads,const std::vector<int64_t> & strides);
torch::jit::Node* Create_reducemax(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_log(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_leakyrelu(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float alpha);
torch::jit::Node* Create_logical_not(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_unsqueeze(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes);
torch::jit::Node* Create_topk(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t k,int64_t axis);
torch::jit::Node* Create_argmax(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis,int64_t keepdims);
torch::jit::Node* Create_lrn(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t size,float alpha,float beta,float bias);
torch::jit::Node* Create_instancenormalization(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float epsilon);
torch::jit::Node* Create_concat(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_maxroipool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & pooled_shape,float spatial_scale);
torch::jit::Node* Create_clip(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float max,float min);
torch::jit::Node* Create_identity(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_reduceprod(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_gather(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_hardsigmoid(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float alpha,float beta);
torch::jit::Node* Create_globallppool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t p);
torch::jit::Node* Create_elu(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,float alpha);
torch::jit::Node* Create_globalaveragepool(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_exp(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_argmin(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis,int64_t keepdims);
torch::jit::Node* Create_reducesum(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_reducemean(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & axes,int64_t keepdims);
torch::jit::Node* Create_depthtospace(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t blocksize);
torch::jit::Node* Create_ceil(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_logsoftmax(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_hardmax(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis);
torch::jit::Node* Create_abs(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args);
torch::jit::Node* Create_convtranspose(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,const std::vector<int64_t> & dilations,int64_t group,const std::vector<int64_t> & kernel_shape,const std::vector<int64_t> & output_padding,const std::vector<int64_t> & output_shape,const std::vector<int64_t> & pads,const std::vector<int64_t> & strides);
torch::jit::Node* Create_lpnormalization(torch::jit::Graph &graph,  const std::vector<torch::jit::Value *>& args,int64_t axis,int64_t p);

